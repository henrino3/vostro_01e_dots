puts "Hello"
1 
= 1
1
1+1
print 'w'
-1 
-1 + 1 *2
commands
help
puts 'Good Hello'
puts "Good Hello"
prints "Hleel"
print 'ddsfedsfsdc'
prints 'ddsfedsfsdc'
"h".class
quit
dhdh
ddd
def sum(a,b)
  quit
def (a,b)
def add(a,b)
  a + b
end
alias sum add
sum(3,2)
sum(3,4)
Document.new.methods
from_file, to_file = ARGV
puts "Copying from #{from_file} to #{to_file}"
# we could do these two on one line, how?
in_file = open(from_file)
indata = in_file.read
puts "The input file is #{indata.length} bytes long"
puts "Does the output file exist? #{File.exist?(to_file)}"
puts "Ready, hit RETURN to continue, CTRL-C to abort."
$stdin.gets
exit
def add
  exit
def add a,b
  c = a 
  c = a + b
  d = a * c
  retrun c
end
add 3,3
def add a,b
  c = a + b
  d = a * b
  return c
end
add 1,1
def add a,b
  c = a + b
end
add 1,1
all(1..50)
def all(1..50)
def (1..50)
def aff(1..50)
a(1..10)
a(1..10).to_a
a(1..10)to_a
a(1..10).to_a
a(1...10).to_a
a(1..10).to_a
a.
a 1..5 to_a
a = (1..10).to_a
a.select! { |i| a.odd}
a.select! { |i| a.odd?}
a.
a.methods
a.method
def aa a,a
  a
end
a + b
def aa a,b
  a + b
end
aa.methods
aa.method
Class.method
Class.methods
a.methods
1.
1.methods
1.
1.def main
def main
  puts 'Hello World!
  puts 'Hello World!'
end
main
main()
def main
puts 'hello world'
end
main
def main 
  puts 'hello world'
end
def main
  puts 'hello world'
end
main
def main 
  name = gets.chomp
quit
./require ex25.rb
require ex25.rb
quit
require "./ex25.rb"
sentence = "All good things come to those who wait."
words = Ex25.break_words(sentence)
words
sorted_words = Ex25.sort_words(words)
Ex25.print_first_word(words)
sorted_words
Ex25.print_first_word(words)
Ex25.print_last_word(words)
ar = (1..10).to_ar
ar = (1..10).to_a
for n in  ar
  puts 'Yo #{n}'
end
for n in ar
  puts 'yo '+ n
end
for n in ar
  puts 'yo 
the_count = [1, 2, 3, 4, 5]
for n in the_count
puts 'hello #{n}'
puts "hello #{n}"
end
the_count.
the_count.methods
the_count.method
~for number in the_count
  puts "This is count #{number}"
end
for number in the_count
  puts "This is count #{number}"
end
for number in the_count
  puts "This is count #{number}"
end
the_count = [1, 2, 3, 4, 5]
for number in the_count
  puts "This is count #{number}"
end
fruits = ['apples', 'oranges', 'pears', 'apricots']
fruits.each do |fruit|
  '#{fruit} are sweet'
end
fruits.each do |fruit|
  "#{fruit} are sweet"
end
fruits.each do |fruit|
  puts "#{fruit} are sweet"
end
fruits.each {|fruit| puts "#{fruit} are cool"
}
elements = []
(0..5).each do {|i}
(0..5).each do {|i| puts "Add Element #{i}
elements.push(i)
}
puts elements
elements
elements.each {|i| puts "#{i}"}
  main defined?
  def main
    puts "Hello"
  end
  main defined?
  defined? main
  main.methods
  class Document
    def main
      puts "Hello"
    end
  end
  main
  main.methods
ahash = ["one" => 1,"two" => 2, "three
" => 3, "four" => 4, "five" => 5]
ahash["one"]
puts ahash["two"]
puts ahash["one"]
ahash = {"one" => 1,"two" => 2, "three
" => 3, "four" => 4, "five" => 5}
puts ahash["one"]
ahash[1]
ahash.each do |i|
  puts "Element #{i}"
end
ahash.methods
ahash["six"] = 6
ahash.each do |i|
  puts "Element #{i}"
end
module Dict
  def Dict.new(n = 25
    )
    aDict = []
    (o..n).each do |i|
      module Dict
        def Dict.new(n=12)
          aDict = []
          (0..n).each dp 
          module Dict
            def Dict.new(n=12)
              (0..n).each do
                aDict.push([])
              end
              return aDict
            end
quit
require "./mystuff.rb"
MyStuff.apple()
MyStuff.apple
require "./stuff.rb"
require "./mystuff.rb"
puts MyStuff::RANDY
r = MyStuff::RANDY
puts r
class Stuff
  def initialize()
    @randy = "We are checeking out NY"
  end
  attr_reader :randy
  def apples
    puts "We love to eat apples"
  end
end
puts Stuff.apples
Stuff.apples
n = new Stuff
n = Stuff.new
n.apples
n:randy
puts n.randy
puts n:randy
class MyStuff
  def initialize()
    @randy1 = "I love Mary Mensah"
  end
  attr_reader :randy2
end
class MyStuff
  def initialize()
    @randy1 = "I love Mary Mensah"
  end
  attr_reader :randy2
  def apples
    puts "race sucks"
  end
end
class MyStuff
  def initialize()
    @randy1 = "I love Mary Mensah"
  end
  attr_reader :randy1
end
class MyStuff1
  @randy1 = "I love Mary Mensah"
  class Obi
    def initialize()
      @ada = "I am an Igbo"
    end
    attr_reader :adaz
    def timbi
      puts "I am Timbi"
    end
  end
  Obi.timbi
  Obi.timbi()
  class Obi 
    def intialize()
      @ada = "I am an Igbo babe"
    end
    attr_reader 
    :ada
    def timbi
      puts "My mame is timbi"
    end
  end
  Obi.timbi
  o = 
  Obi.new
  n.timbi
  o = Obi.new
  o.class
  class Cassie
    def initialize()
      @name = "Cassie Phil Jones"
    end
    attr_reader :name
class Song
  initialize lyrics(lyrics)
  @lyrics = lyrics
end
class Song
  def initialize lyrics lyrics
def initialize lyrics(lyrics)
class Song
  initialize(lyrics)
  @lyrics= lyrics
end
class Song
  def initialize(lyrics)
    @lyrics = lyrics
  end
  def sing()
    @lyrics.each {|i| puts i}
  end
  hello = Song.new("Hello this is me you looking for i am "
  )
  home= Song.new("Yo hometown for the raising of the pimps")
  hello.sing
  hello.sing()
  hello = Song.new(["Hello this is me", "Looking of who i am", "-Adele"]
    hello.sing
    hello.sing()
    quit
class Cassie
  def initialize(lecture)
    @lecture = lecture
  end
  def talk()
    puts "Storytelling 101"
  end
  def @lecture.each {|i| puts i}
def day()
  @lecture.each {|i| puts i}
end
thursay = Cassie.new(["Duolingo", "Chromecast Animation", "Chromecast Documentary"])
class Google
  def initialize(name)
    @name = name
  end
  def @name.each {|i| puts i}
class Google
  def initialize()
    @name = name
  end
  def talk()
    @name.each {|i| puts i}
  end
  cassie = Google.new)(["My name is Cassie","Video Editing", "Storytelling"])
cassie = Google.new(["My name is Cassie","Video Editing", "Storytelling"])
end
class Google
  def initialize()
    def initialize()
      class Google
        def initializa(name)
          @name = name
        end
        def talk()
          @name.each {|i| puts i}
        end
      end
      cassie = Google.new(["My name is Cassie", "I am a brand manager", "I am badass"])
      cassie.talk
      class Google
        def initialize(name)
          @name = name
        end
        def talk()
          @name.each {|i| puts i}
        end
        cassie = Google.new(["My name is Cassie", "I am a brand manager", "It is an amazing job"])
        cassie.talk
        class Google
          def initialize(name)
            @name = name
            def
              quit
class Google
  def intialize(name)
    @name = name
  end
  def talk()
    @name.each {|i| puts i}
  end
end
cassie =  Google.new(["My name is Cassie", "I am a brand manager", "My job is awesome"])
require "./electrion.rb"
require "./electrion.rbqu"
quit
require "election.rb"
require "./election.rb"
now.votefor("Henry")
now = Election.new
now.votefor("Henry")
now.checkvotes
quit
require "./election.rb"
now = Election.new
now.votefor("Henry")
now.checkvotes
quit
require "./election.rb"
now.votefor("Henry")
now = Election.new
now.votefor("Henry")
now.votefor("Bubu")
now.leading
quit
require "./election.rb"
now = Election.new
now.votefor("Henry")
now.votefor("Bubu")
now.checkvotes
now.leading
quit
now = Election.new
require "./election.rb"
now = Election.new
now.votefor("Bubu")
now.votefor("Henry")
now.checkvotes
now.leading
quit
require "./election.rb"
now = Election.new
now.votefor("Henry")
now.votefor("Bubu")
now.checkvotes
now.leading
quit
require "./election.rb"
now = Election.new
now.votefor("Bubu")
now.checkvotes
now.leading
now.losing
quit
require "./election.rb"
quit
n = 
n = User.first
quit
n = User.first
quit
user
n = User.new()
n = Users.first
n = User.find(1)
quit
n = Micropost.first
nc = Citizen.new
Citizen.create()
Admins.create
Admin.create
quit
